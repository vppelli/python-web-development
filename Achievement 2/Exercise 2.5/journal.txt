Exercise 2.4: Django Views and Templates
Learning Goals

• Summarize the process of creating views, templates, and URLs 
• Explain how the “V” and “T” parts of MVT architecture work
• Create a frontend page for your web application


Reflection Questions

1. Do some research on Django views. In your own words, use an example to explain how Django views work.
	Views is the logic that runs when a user accesses a URL. It is what handles the requests and returns a response as in static information like HTML web page or JSON data. This is run through as a python function or a method of a pyton class.

2. Imagine you’re working on a Django web development project, and you anticipate that you’ll have to reuse lots of code in various parts of the project. In this scenario, will you use Django function-based views or class-based views, and why?
	I would use class-based view over Django function based views. The reason class-based views would be best for this senerio is that it follows the DRY principle "dont repeat yourself". Class helps you deffine a structure that you can reuse for multiple parts in your project. 

3.  Read Django’s documentation on the Django template language and make some notes on its basics.
	Django template language is designed to strike a balance between power and ease.
	- A template is a text file. It can generate any text-based format HTML, XML, CSV.
	- It uses Variables, they look like this {{ variables }}. When the template engine encounters a variable, it evaluates that variable and replaces it with the result.
	- There are Filters too, Filters look like this: {{ name|lower }}. This displays the value of the {{ name }} variable after being filtered through the lower filter, which converts text to lowercase. Use a pipe (|) to apply a filter.
	- Tags {% tag %} are more complex than variables: Some create text in the output, some control flow by performing loops or logic, and some load external information into the template to be used by later variables. Some tags require beginning and ending tags (i.e. {% tag %} ... tag contents ... {% endtag %}).
	- To comment-out part of a line in a template, use the comment syntax: {# #}.